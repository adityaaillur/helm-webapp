pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github') 
    }

    stages {
        stage('Clone Repository') {
            when {
                branch 'main'
            }
            steps {
                git url: 'https://github.com/cyse7125-su24-team15/helm-webapp-cve-processor.git', branch: 'main'
            }
        }

        stage('Update Chart Version') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def newVersion = sh(script: "npx semantic-release -q --dry-run | grep 'next version' | awk '{print \$3}'", returnStdout: true).trim()
                    echo "New version: ${newVersion}"
                    sh "sed -i 's/^version:.*/version: ${newVersion}/' csye7125/Chart.yaml"
                    sh "cat csye7125/Chart.yaml"
                }
            }
        }

        stage('Package Helm Chart') {
            when {
                branch 'main'
            }
            steps {
                dir('csye7125') {
                    sh 'helm package .'
                }
            }
        }

        stage('Create GitHub Release') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def chartName = sh(script: "grep '^name:' csye7125/Chart.yaml | awk '{print \$2}'", returnStdout: true).trim()
                    def chartVersion = sh(script: "grep '^version:' csye7125/Chart.yaml | awk '{print \$2}'", returnStdout: true).trim()
                    def zipFileName = "${chartName}-${chartVersion}.tgz"

                    sh """
                    github-release release --user lokesh1306 --repo helm-webapp-cve-processor --tag v${chartVersion} --name "v${chartVersion}" --description "Release of ${chartName} version ${chartVersion}"
                    github-release upload --user lokesh1306 --repo helm-webapp-cve-processor --tag v${chartVersion} --name "${zipFileName}" --file "csye7125/${zipFileName}"
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
