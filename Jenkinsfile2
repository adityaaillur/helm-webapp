pipeline {
    agent any
    
    environment {
        GH_TOKEN = credentials('github-token') 
        CHART_NAME = "csye7125"
        REPO_OWNER = 'cyse7125-su24-team15'
        REPO_NAME = 'helm-webapp-cve-processor'
        NEW_VERSION = ''
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sh "echo ${env.GH_TOKEN}"
                git branch: 'main', url: 'https://github.com/cyse7125-su24-team15/helm-webapp-cve-processor'
            }
        }

        stage('Create Package and Release') {
            steps {
                script {
                    withEnv(["GH_TOKEN=${env.GH_TOKEN}"]) {
                        def output = sh(script: 'npx semantic-release --dry-run --no-ci', returnStdout: true).trim()
                        echo output
                        def newVersion = output.split('\n').find { it.contains('Release note for version') }?.replaceAll(/.*Release note for version (.*):.*/, '$1').trim()
                        echo "New version test: ${newVersion}"
                        if (!newVersion) {
                            error "Failed to extract new version"
                        }
                        sh "sed -i 's/^version:.*/version: ${newVersion}/' csye7125/Chart.yaml"
                        sh "cat csye7125/Chart.yaml"
                        sh "helm package csye7125 --destination ."
                        sh "zip ${CHART_NAME}-${newVersion}.zip ${CHART_NAME}-${newVersion}.tgz"
                        sh "echo ${newVersion}"
                        sh 'git branch --set-upstream-to=origin/main'
                        sh "npx release-it ${newVersion} --github.release --github.assets=${CHART_NAME}-${newVersion}.zip --no-git.requireCleanWorkingDir --github.publish"
                        def latestTag = sh(script: "git describe --tags $(git rev-list --tags --max-count=1)", returnStdout: true).trim()
                        def commitMessages = sh(script: "git log ${latestTag}..HEAD --oneline", returnStdout: true).trim()                    
                        sh "git log ${latestTag}..${newVersion} --oneline"
                        def createReleaseResponse = sh(script: """
                            curl -s -X POST \
                            -H "Authorization: token ${env.GH_TOKEN}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/releases \
                            -d '{
                                "tag_name": "${newVersion}",
                                "target_commitish": "main",
                                "name": "${newVersion}",
                                "body": "Release ${newVersion}\\n\\n${commitMessages}",
                                "draft": false,
                                "prerelease": false
                            }'
                        """, returnStdout: true).trim()

                        def releaseId = sh(script: "echo '${createReleaseResponse}' | jq -r '.id'", returnStdout: true).trim()
                        echo "Created release with ID: ${releaseId}"

                        def uploadUrl = "https://uploads.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/releases/${releaseId}/assets?name=${CHART_NAME}-${newVersion}.zip"
                        sh(script: """
                            curl -s -X POST \
                            -H "Authorization: token ${env.GH_TOKEN}" \
                            -H "Content-Type: application/zip" \
                            --data-binary @${CHART_NAME}-${newVersion}.zip \
                            ${uploadUrl}
                        """)

                        echo "Uploaded asset ${CHART_NAME}-${newVersion}.zip"
                    }
                }
            }
        }
}
}
