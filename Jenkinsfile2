pipeline {
    agent any
    
    environment {
        GH_TOKEN = credentials('github-token') 
        CHART_NAME = "csye7125"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/cyse7125-su24-team15/helm-webapp-cve-processor'
            }
        }

        stage('Create New Version') {
            steps {
                script {
                    withEnv(["GH_TOKEN=${env.GH_TOKEN}"]) {
                        def output = sh(script: 'npx semantic-release --dry-run --no-ci', returnStdout: true).trim()
                        echo output
                        def newVersion = output.split('\n').find { it.contains('nextRelease:') }?.replaceAll(/.*version": "(.*)".*/, '$1')
                        echo "New version: ${newVersion}"
                        
                        if (!newVersion) {
                            error "Failed to extract new version"
                        }
                        sh "sed -i 's/^version:.*/version: ${newVersion}/' csye7125/Chart.yaml"
                        sh "cat csye7125/Chart.yaml"
                    }
                }
            }
        }
        
        stage('Package Chart') {
            steps {
                script {
                    sh "helm package csye7125 --destination ."
                    sh "zip ${CHART_NAME}-${newVersion}.zip ${CHART_NAME}-${newVersion}.tgz"
                }
            }
        }
        
        stage('Create GitHub Release') {
            steps {
                script {
                    def newVersion = sh(script: "npx semantic-release --dry-run | grep 'next version' | awk '{print \$3}'", returnStdout: true).trim()
                    sh "npx release-it ${newVersion} --github.release --github.assets=${CHART_NAME}-${newVersion}.zip"
                }
            }
        }
    }
}
